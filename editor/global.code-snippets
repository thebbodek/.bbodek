{
  "Bbodek useState": {
    "scope": "javascriptreact, typescriptreact, javascript, typescript",
    "prefix": "us",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState$2($3);$0"
    ],
  },
  "Bbodek Dynamic Import": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "di",
    "body": [
      "import dynamic from 'next/dynamic';",
      "",
      "const ${1:Component} = dynamic(",
      "  () => import('./${1:Component}'),",
      "  { ssr: false },",
      ");",
      "$0",
    ],
  },
  "Bbodek useModal": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "um",
    "body": [
      "import dynamic from 'next/dynamic';",
      "import { overlay } from 'overlay-kit';",
      "",
      "const ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} = dynamic(",
      "  () => import('../templates/modals/${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}'),",
      "  { ssr: false },",
      ");",
      "",
      "const ${TM_FILENAME_BASE} = () => {",
      "  const on${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} = () => {",
      "    overlay.open(({ isOpen, unmount }) => (",
      "      <${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} isOpen={isOpen} unmount={unmount} />",
      "    ));",
      "  };",
      "",
      "  return { on${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} };",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      "",
    ],
  },
  "Bbodek Default Hooks": {
    "scope": "javascriptreact, typescriptreact, javascript, typescript",
    "prefix": "hd",
    "body": [
      "const ${TM_FILENAME_BASE} = () => {",
      "  $1",
      "",
      "  return {",
      "    models: {},",
      "    status: {},",
      "    operations: {},",
      "  };",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ]
  },
  "Bbodek Form Validation": {
    "scope": "javascript, typescript",
    "prefix": "fv",
    "body": [
      "import { Nullable } from '@/core/types/Nullable';",
      "",
      "const ${TM_FILENAME_BASE} = ({ value }: Nullable<${1}>) => {",
      "  const errors: Partial<${1}> = {};",
      "",
      "  if (${2:value === null}) {",
      "    ${3:errors['title'] = '값을 입력해주세요';}",
      "  }$0",
      "",
      "  return errors;",
      "};",
      "",
      "export default  ${TM_FILENAME_BASE};",
      ""
    ],
  },
  "Bbodek API Request": {
    "scope": "javascript, typescript",
    "prefix": "req",
    "body": [
      "import { instance } from '@/src/core/api';",
      "import { API_URL } from '@/src/core/api/urls';",
      "import { CoreResponse } from '@/src/core/api/types';",
      "",
      "export const ${1} = async (): Promise<$2> => {",
      "  try {",
      "    const { data } = await instance.$1<CoreResponse<${2}>>(",
      "      API_URL['$3']['$4'](),",
      "    );",
      "",
      "    return data.result;",
      "  } catch (e) {",
      "    throw e;",
      "  }",
      "};",
      ""
    ]
  },
  "Bbodek useQuery": {
    "scope": "javascript, typescript",
    "prefix": "uq",
    "body": [
      "import { useQuery } from '@tanstack/react-query';",
      "import { AxiosError } from 'axios';",
      "",
      "import { QUERY_KEYS } from '@/src/core/api/queryKeys';",
      "import { Adapter } from '@/src/core/api/adapters';",
      "",
      "export const use$1Query = () =>",
      "  useQuery<$1Response, AxiosError>({",
      "    queryKey: QUERY_KEYS['${1/(.*)/${1:/upcase}/}']['${1/(.*)/${1:/upcase}/}'](),",
      "    queryFn: () => get$1(),",
      "    staleTime: 24 * 60 * 60 * 1000,",
      "    select: (data) =>",
      "      Adapter.from(data).to((item) => new $1Adapter(item).adapt()),",
      "  });",
      ""
    ]
  },
  "Bbodek queryClient Query": {
    "scope": "javascript, typescript",
    "prefix": "uqc",
    "body": [
      "import { AxiosError } from 'axios';",
      "",
      "import { QUERY_KEYS } from '@/src/core/api/queryKeys';",
      "",
      "export const use$1FetchQuery = async ({",
      "  queryClient,",
      "}: PrefetchQueryDefaultParams<$2>) =>",
      "  await queryClient.fetchQuery<$1Response, AxiosError>({",
      "    queryKey: QUERY_KEYS['${1/(.*)/${1:/upcase}/}']['${1/(.*)/${1:/upcase}/}'](),",
      "    queryFn: () => get$1(),",
      "  });",
      ""
    ]
  },
  "Bbodek useMutation": {
    "scope": "javascript, typescript",
    "prefix": "umt",
    "body": [
      "import { useMutation } from '@tanstack/react-query';",
      "import { AxiosError } from 'axios';",
      "",
      "import { MutationDefaultResponse } from '@/src/core/api/types';",
      "",
      "export const use$1Mutation = () =>",
      "  useMutation<",
      "    MutationDefaultResponse,",
      "    AxiosError,",
      "    $1Params",
      ">({",
      "    mutationKey: ['use$1Mutation'],",
      "    mutationFn: (params: $1Params) =>",
      "      ${1/(.*)/${1:/camelcase}/}(params),",
      "  });"
    ]
  },
  "Bbodek Adapter": {
    "scope": "javascript, typescript",
    "prefix": "adt",
    "body": [
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  private value: $1;",
      "",
      "  constructor(obj: $1) {",
      "    this.value = obj;",
      "  }",
      "",
      "  get $2() {",
      "    return ${3:this.value}",
      "  }",
      "",
      "  adapt(): $1 {",
      "    return this.$2;",
      "  }",
      "}",
      ""
    ]
  },
  "Bbodek Zustand Default Store": {
    "scope": "javascript, typescript",
    "prefix": "zd",
    "body": [
      "import { create } from 'zustand';",
      "",
      "export interface Use${1}Store {",
      "  value: boolean;",
      "  fn: () => void;",
      "}",
      "",
      "export const use${1}Store = create<Use${1}Store>((set) => ({",
      "  value: false,",
      "  fn: () => set({ value: true }),",
      "}));",
      ""
    ],
  },
  "Bbodek Zustand Persist Store": {
    "scope": "javascript, typescript",
    "prefix": "zp",
    "body": [
      "import { create } from 'zustand';",
      "import { createJSONStorage, persist } from 'zustand/middleware';",
      "",
      "export interface Use${1}Store {",
      "  value: boolean;",
      "  fn: () => void;",
      "}",
      "",
      "export const use${1}Store = create(",
      "  persist<Use${1}Store>(",
      "    (set) => ({",
      "      value: false,",
      "      fn: () => set({ value: true }),",
      "    }),",
      "    {",
      "      version: 0,",
      "      name: '${1/(.*)/${1:/camelcase}/}',",
      "      storage: createJSONStorage(() => localStorage),",
      "    },",
      "  ),",
      ");",
      ""
    ]
  },
  "Bbodek Create Form Hooks": {
    "scope": "javascriptreact, typescriptreact, javascript, typescript",
    "prefix": "ufc",
    "body": [
      "import toast from 'react-hot-toast';",
      "",
      "import { QUERY_KEYS } from '@/core/api/queryKeys';",
      "import useForm from '@/core/hooks/useForm';",
      "import useRefetchQuery from '@/core/hooks/useRefetchQuery';",
      "import { Nullable } from '@/core/types/Nullable';",
      "import { UseFormReturnType } from '@/core/types/UseForm';",
      "",
      "export interface ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType",
      "  extends UseFormReturnType<Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params>> {}",
      "",
      "export interface Use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType {",
      "  models: Pick<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType, 'values' | 'errors'>;",
      "  status: { possibleSubmit: boolean; isPending: boolean };",
      "  operations: Pick<",
      "    ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType,",
      "    'setValues' | 'handleChange'",
      "  > & {",
      "    handleSubmit: () => Promise<void>;",
      "  };",
      "}",
      "",
      "export const ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}InitialValues: Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params> =",
      "  {",
      "    value: null,",
      "  };",
      "",
      "const ${TM_FILENAME_BASE} = (): Use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType => {",
      "  const { refetchQuery } = useRefetchQuery();",
      "  const {",
      "    mutateAsync: ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Mutation,",
      "    isPending: isPending${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/},",
      "    isSuccess,",
      "    reset,",
      "  } = use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Mutation();",
      "",
      "  const isPending = isPending${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} || isSuccess;",
      "",
      "  const { values, errors, setValues, handleChange } = useForm<",
      "    Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params>",
      "  >({",
      "    initialValues: ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}InitialValues,",
      "    validate: (fields) => ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Validation(fields),",
      "  });",
      "",
      "  const hasError = Object.values(errors).some((value) => !!value);",
      "  const filledRequired = !${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}_REQUIRED_FIELDS.some(",
      "    (key) => !values[key],",
      "  );",
      "  const possibleSubmit = !isPending && !hasError && filledRequired;",
      "",
      "  const handleSubmit = async () => {",
      "    if (!possibleSubmit) return;",
      "",
      "    try {",
      "      const params = values as ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params;",
      "",
      "      await ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Mutation(params);",
      "",
      "      await refetchQuery({ queryKey: QUERY_KEYS['${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}']['${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}']() });",
      "      toast.success('등록 성공');",
      "    } catch (e) {",
      "      toast.error('등록 실패');",
      "    } finally {",
      "      reset();",
      "    }",
      "  };",
      "",
      "  return {",
      "    models: { values, errors },",
      "    status: { possibleSubmit, isPending },",
      "    operations: { setValues, handleChange, handleSubmit },",
      "  };",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ]
  },
  "Bbodek Update Form Hooks": {
    "scope": "javascriptreact, typescriptreact, javascript, typescript",
    "prefix": "ufu",
    "body": [
      "import { useEffect } from 'react';",
      "import toast from 'react-hot-toast';",
      "",
      "import { QUERY_KEYS } from '@/core/api/queryKeys';",
      "import useForm from '@/core/hooks/useForm';",
      "import useRefetchQuery from '@/core/hooks/useRefetchQuery';",
      "import { Nullable } from '@/core/types/Nullable';",
      "import { UseFormReturnType } from '@/core/types/UseForm';",
      "import { extractDifferences } from '@/core/utils/extractDifferences';",
      "",
      "export interface ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Fields",
      "  extends Required<Omit<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params, 'alias'>> {}",
      "",
      "export interface ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}UseFormReturnType",
      "  extends UseFormReturnType<Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Fields>> {}",
      "",
      "export interface Use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType {",
      "  models: Pick<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}UseFormReturnType, 'values' | 'errors'>;",
      "  status: { possibleSubmit: boolean; isPending: boolean; isLoading: boolean };",
      "  operations: Pick<",
      "    ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}UseFormReturnType,",
      "    'setValues' | 'handleChange'",
      "  > & {",
      "    handleSubmit: () => Promise<void>;",
      "  };",
      "}",
      "",
      "export interface UseInitial${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}EffectParams",
      "  extends Pick<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}UseFormReturnType, 'setValues'> {",
      "  data: ${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} | undefined;",
      "}",
      "",
      "const useInitial${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Effect = ({",
      "  data,",
      "  setValues,",
      "}: UseInitial${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}EffectParams) => {",
      "  useEffect(() => {",
      "    if (!data) return;",
      "",
      "    setValues(data);",
      "  }, [data]);",
      "};",
      "",
      "export default useInitial${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Effect;",
      "",
      "export const ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}InitialValues: Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Params> =",
      "  {",
      "    value: null,",
      "  };",
      "",
      "const ${TM_FILENAME_BASE} = ({",
      "  id,",
      "}: Pick<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}, 'id'>): Use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}ReturnType => {",
      "  const { refetchQuery } = useRefetchQuery();",
      "  const { data, isLoading } = use${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Detail({ id });",
      "  const {",
      "    mutateAsync: ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Mutation,",
      "    isPending: isPending${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/},",
      "    isSuccess,",
      "    reset,",
      "  } = ${TM_FILENAME_BASE}Mutation();",
      "",
      "  const isPending = isPending${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/} || isSuccess;",
      "",
      "  const { values, errors, setValues, handleChange } = useForm<",
      "    Nullable<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Fields>",
      "  >({",
      "    initialValues: ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}InitialValues,",
      "    validate: (fields) => ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Validation(fields),",
      "  });",
      "",
      "  const originalValues = data;",
      "  const changedValues = extractDifferences({ values, originalValues });",
      "  const hasChangedValues = !!data && Object.keys(changedValues).length > 0;",
      "  const hasError = Object.values(errors).some((value) => !!value);",
      "  const filledRequired = !${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}_REQUIRED_FIELDS.some(",
      "    (key) => !values[key],",
      "  );",
      "  const possibleSubmit =",
      "    !isPending && !hasError && filledRequired && hasChangedValues;",
      "",
      "  const handleSubmit = async () => {",
      "    if (!possibleSubmit) return;",
      "",
      "    try {",
      "      const params = changedValues as Partial<${TM_FILENAME_BASE/^use(.*)/${1:/pascalcase}/}Fields>;",
      "",
      "      await ${TM_FILENAME_BASE/^use(.*)/${1:/camelcase}/}Mutation({ id, ...params });",
      "",
      "      await refetchQuery({ queryKey: QUERY_KEYS['${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}']['${TM_FILENAME_BASE/^use(.*)/${1:/upcase}/}']() });",
      "      toast.success('수정 성공');",
      "    } catch (e) {",
      "      toast.error('수정 실패');",
      "    } finally {",
      "      reset();",
      "    }",
      "  };",
      "",
      "  return {",
      "    models: { values, errors },",
      "    status: { possibleSubmit, isPending, isLoading },",
      "    operations: { setValues, handleChange, handleSubmit },",
      "  };",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ]
  },
}
